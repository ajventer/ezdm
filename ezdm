#!/usr/bin/env python
from bottle import route, run, request, static_file, redirect
from ezdm_libs.util import load_icon, find_files, load_json, debug, user_hash
from ezdm_libs import get_sys_data
from ezdm_libs import frontend
from ezdm_libs.frontend import Page
from ezdm_libs.campaign import Campaign
from ezdm_libs.mockclasses import MockCampaign
import os


sessions = {}


def action_name(action):
    aname = '_' in action and action.upper().split('_')[1] or action.upper()
    return aname


def posthandler(action=None):
    global sessions
    if not frontend.campaign:
        return gethandler(None, None)
    debug("Posthandler", sessions)
    if not action_name(action) in sessions:
        debug("Session reset %s" % action_name(action))
        return gethandler(action)
    debug(sessions[action_name(action)])
    return sessions[action_name(action)].render(request.POST)


def gethandler(action=None, item=None):
    global sessions
    debug("GetHandler", sessions, action, item)
    debug(action)
    if not frontend.campaign.real() and not action == 'EZDM_CAMPAIGNS':
        page = Page()
        out = page.tplrender('header.tpl', {'title': 'Load Campaign'})
        campaigns = find_files('campaigns', '*.json', basename=True, strip=".json")
        campaigns = {'campaigns': campaigns}
        out += page.tplrender('load_campaign.tpl', campaigns)
        out += page.tplrender('footer.tpl', {})
        return out
    elif action == 'EZDM_CAMPAIGNS':
        setmode('dm')
    from ezdm_libs.frontend import Session as ActionSession
    action = action or 'ALL_HOME'
    if '_' in action:
        to_import = 'from ezdm_libs.%s import %s as ActionSession' % (action.lower(), action_name(action))
        debug(to_import)
        exec (to_import)
    else:
        for prefix in ['all', 'ezdm', 'campaign']:
            try:
                to_import = 'from ezdm_libs.%s_%s import %s as ActionSession' % (prefix, action.lower(), action_name(action))
                debug(to_import)
                exec (to_import)
                break
            except:
                pass
    if not action_name(action) in sessions:
        sessions[action_name(action)] = ActionSession()
    debug(sessions)
    if not item:
        return sessions[action_name(action)].render(None)
    else:
        return sessions[action_name(action)].view(item)


@route('/switch_campaign', method='get')
def switch_campaign():
    if frontend.campaign.real():
        frontend.campaign.save()
    frontend.campaign = MockCampaign()
    return gethandler(None, None)


@route('/newchar', method='post')
def switch_character():
    newchar = request.POST['newchar']
    frontend.campaign.current = int(request.POST['newchar'])
    frontend.campaign.chars_in_round()
    return redirect('/action/ALL_MAPS', 302)


@route('/interrupt', method='get')
def interrupt():
    frontend.campaign.current_char().interrupt_cast()
    return redirect('/action/ALL_MAPS', 302)


@route('/endround', method='get')
def endround():
    if frontend.campaign:
        frontend.campaign.endround()
    return redirect('/action/ALL_MAPS', 302)


@route('/load_campaign/<campaign>', method='get')
def load_campaign(campaign):
    frontend.campaign = Campaign(load_json('campaigns', campaign))
    frontend.campaign.endround()
    return redirect('/action/ALL_MAPS', 302)


@route('/mode/<newmode>', method='get')
def setmode(newmode):
    frontend.modevar[user_hash()] = newmode
    debug(frontend.modevar)
    return redirect('/action/ALL_MAPS', 302)


@route('/js', method='get')
def serve_js():
    filename = request.GET['path']
    return static_file(filename, root=get_sys_data('js'), mimetype='text/javascript')


@route('/icon/<source>/<filename>', method='get')
def icon(source, filename):
    icon = load_icon(os.path.join(source, filename))
    debug("Serving %s" % icon)
    extension = icon.split('.')[-1]
    return static_file(os.path.basename(icon), root=os.path.dirname(icon), mimetype='image/%s' % extension)


@route('/view/<action>/<item>', method='get')
def view(action, item):
    debug("View %s %s" % (action, item))
    return gethandler(action, item)


@route('/reset', method='get')
@route('/reset/<action', method='get')
def reset(action=None):
    global sessions
    if not action:
        sessions = {}
    else:
        if action in sessions:
            del(sessions[action])
    return gethandler()


@route('/', method='get')
@route('/action/<action>', method='get')
@route('/action/<action>', method='post')
def main_page(action=None):
    global sessions
    debug(str(request))
    if request.POST:
        return posthandler(action)
    else:
        return gethandler(action, None)


if __name__ == '__main__':
    run(host='0.0.0.0', port=8000, server='cherrypy', debug=True)
